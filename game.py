from card import build_new_game_deck, COLORS
from player import Player

import random

class Round():
    def __init__(self, players, draw_pile, discard_pile):
        self.players = players #generated by game.start()
        self.draw = draw_pile #generated by game.start()
        self.discard = discard_pile #generated by game.start()
        self.round_finished = False
        self.active_discard = self.discard[-1]
        self.active_color = self.active_discard.color
        self.direction = 1 # will either be 1 or -1 to determine who next player is as we cycle through indices
        self.next_player_index = 0 # starts as first player in the player list. 
        print(f"The top card of the Discard Pile is {self.active_discard}.")
        print("********************")
        self.check_first_discard_special()
        self.active_player = self.players[self.next_player_index]
        print(f"The first player to play will be {self.active_player}")
        print("********************")

    def check_first_discard_special(self):
        if self.active_discard.special:
            match self.active_discard.value:
                case "Skip":
                    print(f"Uh Oh! {self.players[self.next_player_index]} loses their first turn!")
                    self.next_player_index += 1
                case "Reverse":
                    print("Looks like we are changing directions!")
                    self.direction *= -1
                case "Draw Two":
                    print(f"Oh No! {self.players[self.next_player_index]} must draw 2 cards and loses their first turn.")
                    self.draw_card(self.players[self.next_player_index], 2)
                    self.next_player_index += 1
                case _:
                    print(f"Looks like {self.players[self.next_player_index]} will get to pick the first color!")

    def draw_card(self, player, num=1):
        print(f"{player} is drawing {num} card(s).")
        for _ in range(num):
            if len(self.draw) == 0:
                self.reshuffle_draw_pile()
            card = self.draw.pop()
            player.hand.append(card)
            print(f"{player}'s hand now has {len(player.hand)} cards in it.")
            
    def reshuffle_draw_pile(self):
        print("Draw pile empty - reshuffling discard pile...")
        keep = self.discard.pop()
        random.shuffle(self.discard)
        self.draw[:] = self.discard
        self.discard[:] = [keep]

    def player_turn(self):
        player = self.active_player
        self.active_discard = self.discard[-1]
        self.active_color = self.active_discard.color

        if player.cpu:
            valid_plays = player.get_valid_plays(self.active_color, self.active_discard)
            if len(valid_plays) == 0:
                print(f"{player} does not have any valid cards to play. Drawing a card.")
                self.draw_card(player)
                card_drawn = player.hand[-1]
                if card_drawn.color == "Wild" or card_drawn.color == self.active_discard.color or card_drawn.value == self.active_discard.value:
                    self.play_card(player, card_drawn)
                    self.active_player = self.players[self.next_player_index]
                    return
                else:
                    self.next_player_index += 1 * self.direction
                    self.next_player_index %= 4
                    self.active_player = self.players[self.next_player_index]
                    return

            else:
                card_to_play = random.choice(valid_plays)
                self.play_card(player, card_to_play)
                self.active_player = self.players[self.next_player_index]
                return
        else: # Player's turn
            print(f"Your hand is {player.hand}.")
            valid_plays = player.get_valid_plays(self.active_color, self.active_discard)

            if len(valid_plays) == 0:
                print("You do not have a valid card to play. Drawing a card")
                self.draw_card(player)
                card_drawn = player.hand[-1]
                if card_drawn.color == "Wild" or card_drawn.color == self.active_discard.color or card_drawn.value == self.active_discard.value:
                    print(f"{card_drawn} is a valid card to play.")
                    response = input(f"Do you wish to play {card_drawn}? [Y]es or [N]o? ")
                    while response.lower() != "y" and response.lower() != "n":
                        response = input("Please only enter either y or n: ")


            print(f"{player} is a PC and skipping their turn.")
            self.next_player_index += 1 * self.direction
            self.next_player_index %= 4
            self.active_player = self.players[self.next_player_index]
            return

    def play_card(self, player, card):
        print(f"{player} is playing {card}.")
        if len(player.hand) == 2:
            print(f"{player} says UNO!!")
        self.discard.append(card)
        player.hand.remove(card)

        if card.special:
            match card.value:
                case "Skip":
                    print(f"Uh Oh! {self.players[self.next_player_index]} loses their next turn!")
                    self.next_player_index += 1 * self.direction
                    self.active_color = card.color
                case "Reverse":
                    print(f"{player} reversed directions!")
                    self.direction *= -1
                    self.active_color = card.color
                case "Draw Two":
                    print(f"Oh No! {self.players[self.next_player_index]} must draw 2 cards and lose their next turn.")
                    self.draw_card(self.players[self.next_player_index], 2)
                    self.next_player_index += 1 * self.direction
                    self.active_color = card.color
                case "Wild":
                    print(f"{player} gets to pick the next color!")
                    new_color = random.choice(COLORS)
                    while new_color == self.active_color:
                        new_color = random.choice(COLORS)
                    print(f"{player} chooses {new_color}")
                    self.active_color = new_color
                case "Wild Draw Four":
                    print(f"Oh No! {self.players[self.next_player_index]} must draw 4 cards and lose their next turn.")
                    self.draw_card(self.players[self.next_player_index], 4)
                    self.next_player_index += 1 * self.direction
                    print(f"{player} gets to pick the next color!")
                    new_color = random.choice(COLORS)
                    while new_color == self.active_color:
                        new_color = random.choice(COLORS)
                    print(f"{player} chooses {new_color}")
                    self.active_color = new_color
        else:
            self.active_color = card.color
        self.next_player_index += 1 * self.direction
        self.next_player_index %= 4
        
        print(f"{player} now has {len(player.hand)} card(s) in their hand.")
        if len(player.hand) == 0:
            print(f"{player} wins the round!")
            self.round_finished = True
            return
        print(f"The active color is {self.active_color}.")
        

def start():
    intro()
    players = generate_players()
    draw_pile = build_new_game_deck()
    deal_hands(players, draw_pile)
    discard_pile = make_discard(draw_pile)

    return players, draw_pile, discard_pile

def intro():
    print("********************")
    print("Welcome to UNO!")
    print("********************")

def generate_players():
    NAMES = [
    "Emma",
    "Liam",
    "Olivia",
    "Noah",
    "Ava",
    "Ethan",
    "Sophia",
    "Mason",
    "Isabella",
    "William",
    "Mia",
    "James",
    "Charlotte",
    "Benjamin",
    "Amelia",
    "Lucas",
    "Harper",
    "Henry",
    "Evelyn",
    "Alexander"
]
    players = []

    player_name = input("What is your name? ")

    players.append(Player(player_name, cpu=False))

    num_opponents = get_num_opponents()

    opponents = random.sample(NAMES,num_opponents)
    print("********************")
    print("Today you will be playing against:")
    for opponent in opponents:
        print(opponent)

    for i in range(num_opponents):
        players.append(Player(f"{opponents[i]}"))

    
    
    return players

def get_num_opponents():
    valid_num = False
    while not valid_num:
        try:
            num_opponents = int(input("How many opponents would you like? (1-3) "))
            if 1 <= num_opponents <= 3:
                valid_num = True
            else:
                print("Please enter a number between 1 and 3. ")
        except:
            print("Please enter a valid digit.")
    return num_opponents

def deal_hands(players, deck):
    random.shuffle(players)
    player_order = "The player order is "
    for player in players:
        player_order += f"{player.name} "
    print("********************")
    print(player_order)
    print(f"The Dealer will be {players[-1]}")
    print("********************")
    print("Dealing 7 cards to each player")
    for _ in range(7):
        for player in players:
            card = deck.pop()
            player.hand.append(card)
    print("********************")

def make_discard(deck):
    discard_pile = []
    start_card = deck.pop()
    if start_card.value == "Wild Draw Four":
        while True:
            print(f"Discard Pile cannot start with a {start_card}. Reshuffling the Draw Pile and discarding a new card.")
            deck.append(start_card)
            random.shuffle(deck)
            start_card = deck.pop()
            if start_card.value != "Draw Four":
                break
    discard_pile.append(start_card)
    return discard_pile


